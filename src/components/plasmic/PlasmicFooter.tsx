
    // @ts-nocheck
    /* eslint-disable */
    /* tslint:disable */
    /* prettier-ignore-start */
    /** @jsxRuntime classic */
    /** @jsx createPlasmicElementProxy */
    /** @jsxFrag React.Fragment */
    // This class is auto-generated by Plasmic; please do not edit!
    // Plasmic Project: QijKjBjMCAKhTPs42ygrD
    // Component: hXnpt55B1kJU
    // plasmic-unformatted
    import * as React from "react";
    
    import * as p from  "@plasmicapp/react-web";
    import {hasVariant, classNames, wrapWithClassName, createPlasmicElementProxy, makeFragment, MultiChoiceArg, SingleBooleanChoiceArg, SingleChoiceArg, pick, omit, useTrigger, StrictProps, deriveRenderOpts, ensureGlobalVariants} from "@plasmicapp/react-web";
    
    
    
    import "@plasmicapp/react-web/lib/plasmic.css";
    import  "./plasmic__default_style.css"; // plasmic-import: global/defaultcss
    import  "./plasmic_simple_light.css"; // plasmic-import: QijKjBjMCAKhTPs42ygrD/projectcss
    import  "./PlasmicFooter.css" // plasmic-import: hXnpt55B1kJU/css
  
    
    

    
    export type PlasmicFooter__VariantMembers = {
      
    };
    export type PlasmicFooter__VariantsArgs = {};
    type VariantPropType = keyof PlasmicFooter__VariantsArgs;
    export const PlasmicFooter__VariantProps = new Array<VariantPropType>();
  

    
    export type PlasmicFooter__ArgsType = {};
    type ArgPropType = keyof PlasmicFooter__ArgsType;
    export const PlasmicFooter__ArgProps = new Array<ArgPropType>();
  

    export type PlasmicFooter__OverridesType = {
    root?: p.Flex<"div">;
  };

    
    export interface DefaultFooterProps {
      
      className?: string;
    }
  

    
    function PlasmicFooter__RenderFunc(
      props: {
        variants: PlasmicFooter__VariantsArgs,
        args: PlasmicFooter__ArgsType
        overrides: PlasmicFooter__OverridesType
        forNode?: string
      }
    ) {
      const {variants, args, overrides, forNode} = props;

      
      
      return (
        
  <p.Stack
    as={"div"}
    data-plasmic-name={"root"}
    data-plasmic-override={overrides.root}
    data-plasmic-root={true}
    data-plasmic-for-node={forNode}
    hasGap={true}
    className={classNames("plasmic_default__all", "plasmic_default__div", "root_reset_QijKjBjMCAKhTPs42ygrD", "Footer__root___2U7H7")}
    
    >
          
  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "Footer__box__uz4C8")}
    
    />
  

  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "Footer__link___15PnN")}
href={("support@artelokuvaoy.com" as const)}
    
    >
          { "Support" }
        </a>
  

  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "Footer__link__pdOfi")}
href={("https://www.youtube.com/channel/UC_4SOL8f-NygQWdw6-_DclQ/videos" as const)}
    
    >
          { "Kanava" }
        </a>
  

  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "Footer__link__ljHtk")}
href={("https://discord.com/invite/rD4Byp6" as const)}
    
    >
          { "Discord" }
        </a>
  

  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "Footer__link___4Z90J")}
href={("patreon.artelokuvaoy.com" as const)}
    
    >
          { "Patreon" }
        </a>
  

  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "__wab_text", "Footer__box__hjriq")}
    
    >
          { "\nÂ© 2021 Art Elokuva \"Outo Yritys\"  Org." }
        </div>
  
        </p.Stack>
  
      ) as React.ReactElement | null;
    }

    
    const PlasmicDescendants = {
      root: ["root"],
    } as const;
    type NodeNameType = keyof typeof PlasmicDescendants;
    type DescendantsType<T extends NodeNameType> = (typeof PlasmicDescendants)[T][number];
    type NodeDefaultElementType = {
      root: "div"
    };
  

    
    type ReservedPropsType = "variants" | "args" | "overrides";
    type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicFooter__OverridesType, DescendantsType<T>>;
    type NodeComponentProps<T extends NodeNameType> = (
      // Explicitly specify variants, args, and overrides as objects
      & {
        variants?: PlasmicFooter__VariantsArgs;
        args?: PlasmicFooter__ArgsType;
        overrides?: NodeOverridesType<T>;
      }
      // Specify variants directly as props
      & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType>
      // Specify args directly as props
      & Omit<PlasmicFooter__ArgsType, ReservedPropsType>
      // Specify overrides for each element directly as props
      & Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType>
      // Specify props for the root element
      & Omit<Partial<React.ComponentProps<NodeDefaultElementType[T]>>, ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>>
    );
    function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
      type PropsType = NodeComponentProps<NodeName> & {key?: React.Key};
      const func = function<T extends PropsType>(props: T & StrictProps<T, PropsType>) {
        const {variants, args, overrides} = deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps,
        });

        return PlasmicFooter__RenderFunc({
          variants, args, overrides, forNode: nodeName
        });
      };
      if (nodeName === "root") {
        func.displayName = "PlasmicFooter";
      } else {
        func.displayName = `PlasmicFooter.${nodeName}`;
      }
      return func;
    }

    export const PlasmicFooter = Object.assign(
      // Top-level PlasmicFooter renders the root element
      makeNodeComponent("root"),
      {
        // Helper components rendering sub-elements
        

        // Metadata about props expected for PlasmicFooter
        internalVariantProps: PlasmicFooter__VariantProps,
        internalArgProps: PlasmicFooter__ArgProps,
      }
    );
  

    export default PlasmicFooter;
    /* prettier-ignore-end */
  