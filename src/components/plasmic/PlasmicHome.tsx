
    // @ts-nocheck
    /* eslint-disable */
    /* tslint:disable */
    /* prettier-ignore-start */
    /** @jsxRuntime classic */
    /** @jsx createPlasmicElementProxy */
    /** @jsxFrag React.Fragment */
    // This class is auto-generated by Plasmic; please do not edit!
    // Plasmic Project: QijKjBjMCAKhTPs42ygrD
    // Component: zO408pmuw6AB
    // plasmic-unformatted
    import * as React from "react";
    
    import * as p from  "@plasmicapp/react-web";
    import {hasVariant, classNames, wrapWithClassName, createPlasmicElementProxy, makeFragment, MultiChoiceArg, SingleBooleanChoiceArg, SingleChoiceArg, pick, omit, useTrigger, StrictProps, deriveRenderOpts, ensureGlobalVariants} from "@plasmicapp/react-web";
    import Footer from "..//Footer";  // plasmic-import: hXnpt55B1kJU/component
import TopSection from "..//TopSection";  // plasmic-import: Njo910sC96l4/component
import Header from "..//Header";  // plasmic-import: QyzeFos7Y0jF/component
    
    import {LahjoitaThingContext, LahjoitaThingValue} from "./PlasmicGlobalVariant__LahjoitaThing";  // plasmic-import: g7Y8HDtKUW/globalVariant
import {useScreenVariants} from "./PlasmicGlobalVariant__Screen";  // plasmic-import: tfN8nJpaqzO88/globalVariant
import {DesktopContext, DesktopValue} from "./PlasmicGlobalVariant__Desktop";  // plasmic-import: JiKdD7wKL4/globalVariant
  
    
    import "@plasmicapp/react-web/lib/plasmic.css";
    import  "./plasmic__default_style.css"; // plasmic-import: global/defaultcss
    import  "./plasmic_simple_light.css"; // plasmic-import: QijKjBjMCAKhTPs42ygrD/projectcss
    import  "./PlasmicHome.css" // plasmic-import: zO408pmuw6AB/css
  
    
    

    
    export type PlasmicHome__VariantMembers = {
      
    };
    export type PlasmicHome__VariantsArgs = {};
    type VariantPropType = keyof PlasmicHome__VariantsArgs;
    export const PlasmicHome__VariantProps = new Array<VariantPropType>();
  

    
    export type PlasmicHome__ArgsType = {};
    type ArgPropType = keyof PlasmicHome__ArgsType;
    export const PlasmicHome__ArgProps = new Array<ArgPropType>();
  

    export type PlasmicHome__OverridesType = {
    root?: p.Flex<"div">;
footer?: p.Flex<typeof Footer>;
box?: p.Flex<"div">;
header?: p.Flex<typeof Header>;
  };

    
    export interface DefaultHomeProps {
      
      className?: string;
    }
  

    
    function PlasmicHome__RenderFunc(
      props: {
        variants: PlasmicHome__VariantsArgs,
        args: PlasmicHome__ArgsType
        overrides: PlasmicHome__OverridesType
        forNode?: string
      }
    ) {
      const {variants, args, overrides, forNode} = props;

      
      
  const globalVariants = ensureGlobalVariants({
    lahjoitaThing: React.useContext(LahjoitaThingContext),
screen: useScreenVariants(),
desktop: React.useContext(DesktopContext)
  });

      return (
        <React.Fragment>
    
    
    
      <div className={"plasmic_page_wrapper"}>
        
  <div
    
    data-plasmic-name={"root"}
    data-plasmic-override={overrides.root}
    data-plasmic-root={true}
    data-plasmic-for-node={forNode}
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "root_reset_QijKjBjMCAKhTPs42ygrD", "Home__root___6Da22", { "Home__root__global_lahjoitaThing_unnamedVariant___6Da22YktPe": hasVariant(globalVariants, "lahjoitaThing", "unnamedVariant") })}
    
    >
          
  <Footer
    
    data-plasmic-name={"footer"}
    data-plasmic-override={overrides.footer}
    
    
    
    className={classNames("__wab_instance", "Home__footer__a39Zd")}
    
    />
  

  <TopSection
    
    
    
    
    
    
    className={classNames("__wab_instance", "Home__topSection__lg2Oy", { "Home__topSection__global_lahjoitaThing_unnamedVariant__lg2OyYktPe": hasVariant(globalVariants, "lahjoitaThing", "unnamedVariant") })}
    
    />
  

  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "Home__link__q8RRj")}
href={("patreon.artelokuvaoy.com" as const)}
    
    >
          { "Patreon" }
        </a>
  
{ (hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "Home__link__rhIJ")}
href={("https://www.plasmic.app/" as const)}
    
    >
          { hasVariant(globalVariants, "screen", "mobile") ? "Patreon" : "Some link text" }
        </a>
  ) : null }

  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "Home__link__vDjmN")}
href={("artelokuvaoy.com/tyopaikat" as const)}
    
    >
          { "Ty√∂paikat" }
        </a>
  

  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "Home__link__wQeGi")}
href={("https://www.youtube.com/channel/UC_4SOL8f-NygQWdw6-_DclQ/videos" as const)}
    
    >
          { "Videot" }
        </a>
  

  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "Home__link__fxMHc")}
href={("https://www.plasmic.app/" as const)}
    
    >
          { "Lahjoita" }
        </a>
  
{ (hasVariant(globalVariants, "lahjoitaThing", "unnamedVariant") ? true : false) ? (
  <a
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__a", "__wab_text", "Home__link___0NpJi", { "Home__link__global_lahjoitaThing_unnamedVariant___0NpJiYktPe": hasVariant(globalVariants, "lahjoitaThing", "unnamedVariant") })}
href={hasVariant(globalVariants, "lahjoitaThing", "unnamedVariant") ? ("https://www.paypal.com/donate/?hosted_button_id=3U9MXFKHR6CR8" as const) : ("https://www.plasmic.app/" as const)}
    
    >
          { hasVariant(globalVariants, "lahjoitaThing", "unnamedVariant") ? "Lahjoita (paypal)" : "Some link text" }
        </a>
  ) : null }

  <p.Stack
    as={"div"}
    data-plasmic-name={"box"}
    data-plasmic-override={overrides.box}
    
    
    hasGap={true}
    className={classNames("plasmic_default__all", "plasmic_default__div", "Home__box__wxiit")}
    
    >
          
  <Header
    
    data-plasmic-name={"header"}
    data-plasmic-override={overrides.header}
    
    
    
    className={classNames("__wab_instance", "Home__header___52GD8", { "Home__header__global_desktop___52GD8Xl8Az": hasVariant(globalVariants, "desktop", "desktop") })}
    
    />
  
        </p.Stack>
  

  <TopSection
    
    
    
    
    
    
    className={classNames("__wab_instance", "Home__topSection__v74Ex")}
    
    />
  
        </div>
  
      </div>
    
  </React.Fragment>
      ) as React.ReactElement | null;
    }

    
    const PlasmicDescendants = {
      root: ["root", "footer", "box", "header"],
footer: ["footer"],
box: ["box", "header"],
header: ["header"],
    } as const;
    type NodeNameType = keyof typeof PlasmicDescendants;
    type DescendantsType<T extends NodeNameType> = (typeof PlasmicDescendants)[T][number];
    type NodeDefaultElementType = {
      root: "div";
footer: typeof Footer;
box: "div";
header: typeof Header
    };
  

    
    type ReservedPropsType = "variants" | "args" | "overrides";
    type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicHome__OverridesType, DescendantsType<T>>;
    type NodeComponentProps<T extends NodeNameType> = (
      // Explicitly specify variants, args, and overrides as objects
      & {
        variants?: PlasmicHome__VariantsArgs;
        args?: PlasmicHome__ArgsType;
        overrides?: NodeOverridesType<T>;
      }
      // Specify variants directly as props
      & Omit<PlasmicHome__VariantsArgs, ReservedPropsType>
      // Specify args directly as props
      & Omit<PlasmicHome__ArgsType, ReservedPropsType>
      // Specify overrides for each element directly as props
      & Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType>
      // Specify props for the root element
      & Omit<Partial<React.ComponentProps<NodeDefaultElementType[T]>>, ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>>
    );
    function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
      type PropsType = NodeComponentProps<NodeName> & {key?: React.Key};
      const func = function<T extends PropsType>(props: T & StrictProps<T, PropsType>) {
        const {variants, args, overrides} = deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps,
        });

        return PlasmicHome__RenderFunc({
          variants, args, overrides, forNode: nodeName
        });
      };
      if (nodeName === "root") {
        func.displayName = "PlasmicHome";
      } else {
        func.displayName = `PlasmicHome.${nodeName}`;
      }
      return func;
    }

    export const PlasmicHome = Object.assign(
      // Top-level PlasmicHome renders the root element
      makeNodeComponent("root"),
      {
        // Helper components rendering sub-elements
        footer: makeNodeComponent("footer"),
box: makeNodeComponent("box"),
header: makeNodeComponent("header"),

        // Metadata about props expected for PlasmicHome
        internalVariantProps: PlasmicHome__VariantProps,
        internalArgProps: PlasmicHome__ArgProps,
      }
    );
  

    export default PlasmicHome;
    /* prettier-ignore-end */
  