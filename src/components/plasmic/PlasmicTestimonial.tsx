
    // @ts-nocheck
    /* eslint-disable */
    /* tslint:disable */
    /* prettier-ignore-start */
    /** @jsxRuntime classic */
    /** @jsx createPlasmicElementProxy */
    /** @jsxFrag React.Fragment */
    // This class is auto-generated by Plasmic; please do not edit!
    // Plasmic Project: QijKjBjMCAKhTPs42ygrD
    // Component: yWPfLh7Ef1r-b
    // plasmic-unformatted
    import * as React from "react";
    
    import * as p from  "@plasmicapp/react-web";
    import {hasVariant, classNames, wrapWithClassName, createPlasmicElementProxy, makeFragment, MultiChoiceArg, SingleBooleanChoiceArg, SingleChoiceArg, pick, omit, useTrigger, StrictProps, deriveRenderOpts, ensureGlobalVariants} from "@plasmicapp/react-web";
    import Avatar from "..//Avatar";  // plasmic-import: O0uBJ5DBtN6X3/component
    
    
    import "@plasmicapp/react-web/lib/plasmic.css";
    import  "./plasmic__default_style.css"; // plasmic-import: global/defaultcss
    import  "./plasmic_simple_light.css"; // plasmic-import: QijKjBjMCAKhTPs42ygrD/projectcss
    import  "./PlasmicTestimonial.css" // plasmic-import: yWPfLh7Ef1r-b/css
  
    import QuoteDashesIcon from "./PlasmicIcon__QuoteDashes";  // plasmic-import: 0ezS13134x7SF/icon
    

    
    export type PlasmicTestimonial__VariantMembers = {
      
    };
    export type PlasmicTestimonial__VariantsArgs = {};
    type VariantPropType = keyof PlasmicTestimonial__VariantsArgs;
    export const PlasmicTestimonial__VariantProps = new Array<VariantPropType>();
  

    
    export type PlasmicTestimonial__ArgsType = {};
    type ArgPropType = keyof PlasmicTestimonial__ArgsType;
    export const PlasmicTestimonial__ArgProps = new Array<ArgPropType>();
  

    export type PlasmicTestimonial__OverridesType = {
    root?: p.Flex<"div">;
avatar?: p.Flex<typeof Avatar>;
svg?: p.Flex<"svg">;
  };

    
    export interface DefaultTestimonialProps {
      
      className?: string;
    }
  

    
    function PlasmicTestimonial__RenderFunc(
      props: {
        variants: PlasmicTestimonial__VariantsArgs,
        args: PlasmicTestimonial__ArgsType
        overrides: PlasmicTestimonial__OverridesType
        forNode?: string
      }
    ) {
      const {variants, args, overrides, forNode} = props;

      
      
      return (
        
  <div
    
    data-plasmic-name={"root"}
    data-plasmic-override={overrides.root}
    data-plasmic-root={true}
    data-plasmic-for-node={forNode}
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "root_reset_QijKjBjMCAKhTPs42ygrD", "Testimonial__root__s7Txo")}
    
    >
          
  <Avatar
    
    data-plasmic-name={"avatar"}
    data-plasmic-override={overrides.avatar}
    
    
    
    className={classNames("__wab_instance", "Testimonial__avatar__kg3Xb")}
    
    />
  

  <QuoteDashesIcon
    
    data-plasmic-name={"svg"}
    data-plasmic-override={overrides.svg}
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__svg", "Testimonial__svg__k8KrX")}
role={"img"}
    
    />
  

  <p.Stack
    as={"div"}
    
    
    
    
    hasGap={true}
    className={classNames("plasmic_default__all", "plasmic_default__div", "Testimonial__box__gqTba")}
    
    >
          
  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "__wab_text", "Testimonial__box__kuqAi")}
    
    >
          { "“ I love this product and would recommend it to anyone. Could be not easier to use, and our multiple websites are wonderful. We get nice comments all the time. “" }
        </div>
  

  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "__wab_text", "Testimonial__box__bfEiL")}
    
    >
          { "Darya Finger" }
        </div>
  

  <div
    
    
    
    
    
    
    className={classNames("plasmic_default__all", "plasmic_default__div", "__wab_text", "Testimonial__box__dtPw3")}
    
    >
          { "CEO & Co-Founder @Dropbox" }
        </div>
  
        </p.Stack>
  
        </div>
  
      ) as React.ReactElement | null;
    }

    
    const PlasmicDescendants = {
      root: ["root", "avatar", "svg"],
avatar: ["avatar"],
svg: ["svg"],
    } as const;
    type NodeNameType = keyof typeof PlasmicDescendants;
    type DescendantsType<T extends NodeNameType> = (typeof PlasmicDescendants)[T][number];
    type NodeDefaultElementType = {
      root: "div";
avatar: typeof Avatar;
svg: "svg"
    };
  

    
    type ReservedPropsType = "variants" | "args" | "overrides";
    type NodeOverridesType<T extends NodeNameType> = Pick<PlasmicTestimonial__OverridesType, DescendantsType<T>>;
    type NodeComponentProps<T extends NodeNameType> = (
      // Explicitly specify variants, args, and overrides as objects
      & {
        variants?: PlasmicTestimonial__VariantsArgs;
        args?: PlasmicTestimonial__ArgsType;
        overrides?: NodeOverridesType<T>;
      }
      // Specify variants directly as props
      & Omit<PlasmicTestimonial__VariantsArgs, ReservedPropsType>
      // Specify args directly as props
      & Omit<PlasmicTestimonial__ArgsType, ReservedPropsType>
      // Specify overrides for each element directly as props
      & Omit<NodeOverridesType<T>, ReservedPropsType | VariantPropType | ArgPropType>
      // Specify props for the root element
      & Omit<Partial<React.ComponentProps<NodeDefaultElementType[T]>>, ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>>
    );
    function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
      type PropsType = NodeComponentProps<NodeName> & {key?: React.Key};
      const func = function<T extends PropsType>(props: T & StrictProps<T, PropsType>) {
        const {variants, args, overrides} = deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTestimonial__ArgProps,
          internalVariantPropNames: PlasmicTestimonial__VariantProps,
        });

        return PlasmicTestimonial__RenderFunc({
          variants, args, overrides, forNode: nodeName
        });
      };
      if (nodeName === "root") {
        func.displayName = "PlasmicTestimonial";
      } else {
        func.displayName = `PlasmicTestimonial.${nodeName}`;
      }
      return func;
    }

    export const PlasmicTestimonial = Object.assign(
      // Top-level PlasmicTestimonial renders the root element
      makeNodeComponent("root"),
      {
        // Helper components rendering sub-elements
        avatar: makeNodeComponent("avatar"),
svg: makeNodeComponent("svg"),

        // Metadata about props expected for PlasmicTestimonial
        internalVariantProps: PlasmicTestimonial__VariantProps,
        internalArgProps: PlasmicTestimonial__ArgProps,
      }
    );
  

    export default PlasmicTestimonial;
    /* prettier-ignore-end */
  